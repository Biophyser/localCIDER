{"name":"LocalCIDER","tagline":"LocalCIDER is the Python backend for CIDER","body":"# localCIDER\r\n\r\n`v 0.1.0 - August 8th 2014`\r\n\r\n\r\n`DOCUMENTATION IN PROGRESS....`\r\n\r\n## Introduction\r\n\r\n**CIDER** [Classification of Intrinsically Disordered Ensemble Regions](http://pappulab.wustl.edu/CIDER) is a [currently under construction] webserver for calculating various properties of a disordered sequence. CIDER's calculations are carried out by a backend app, called localCIDER.\r\n\r\n**CIDER** is useful if you want to quickly calculate some parameter on the fly. HOWEVER, for doing a huge range of sequences, we recommend you instead use **localCIDER** and carry out the computation locally.\r\n\r\n### Why LocalCIDER vs. CIDER?\r\nLocalCIDER lets us provide an implicit distributed computing model to all of CIDER's calculations. Think of it this way - if 100 people have 100 sequences, we (the Pappu lab) have the burden of 10,000 calculations to perform. If everyone submitted these sequences at once, the website would slow for everyone, and maybe crash. This is a lot of work for us, and very annoying for you, the user. HOWEVER, by using LocalCIDER you can take advantage of\r\n\r\n* Your own local infrastructure\r\n* The ability to programatically create analysis pipelines\r\n* The fact you can operate independently of the CIDER webserver\r\n\r\nMoreoever, if therese a type of anlysis you use frequently, we can build this into localCIDER relativly easy. Adding new functionality is typically much more involved for a web-app.\r\n\r\n\r\n## Usage and installation\r\n\r\n#### Introduction\r\n**localCIDER** version 0.1.0 was submitted to `pip` (the Python Package Index) on the 8th of August. This should be considered an alpha release, which is to say we're still ironing out creases, and it would be greatly appreciated if you could report any issues to alex.holehouse@wustl.edu. However, many of the features are ready to go!\r\n\r\n#### Installing on OSX or linux\r\nWe recommend installing using `pip`. `pip` is a command line interface for downloading and installing packages from the Python package index (PyPI). If you don't yet have pip installed [see the documentation here](http://pip.readthedocs.org/en/latest/installing.html).\r\n\r\nWe also recommend `virtualenv` although this is not at all required, it's just generally a good route to go if you use Python!\r\n\r\nOnce `pip` is installed **localCIDER** can be installed by running\r\n\r\n    [sudo] pip install localcider\r\n\r\nVery simple! **localCIDER** depends on both `numpy` and `matplotlib`, both of which will be installed via `pip` if you haven't already installed them.\r\n\r\n\r\n#### How to use\r\nOnce you have localcider installed via pip, fire up Python and `import` the localcider package;\r\n\r\n    import localcider\r\n    \r\nYou'll be greeted with a message detailing the current version.\r\n\r\nThere are two main localcider modules right now;\r\n\r\n* `sequenceParameter` which lets you calculate many different parameters, as well as show or save plots relating to a specific sequence - ***this is the main module of interest***\r\n* `plots` which lets you plot certain parameters independent of sequenceParameter\r\n\r\nIn the next release we'll also introduce the `sequencePermutant` code, which employs a variety of approaches to generate permutants.\r\n\r\n##### Using sequenceParameter\r\n\r\nThe approach we recommend for accessing SequenceParameter objects is to use the following Python code;\r\n\r\n\r\n    from localcider.sequenceParameter import SequenceParameter\r\n    \r\n    \r\nBy opening your code with this line you now have direct access to the `SequenceParameter` class, which takes either a **string** of an amino acid sequence or the filename of a file containing an amino acid sequence, which is then read and parsed. As an example;\r\n\r\n\r\n    # as before we import the SequenceParameter class directly\r\n    from localcider.sequenceParameter import SequenceParameter\r\n\t\r\n\t# the sequence below is the first 30 residues from alpha-synuclein\r\n\tsequenceObject = SequenceParameter(\"MDVFMKGLSKAKEGVVAAAEKTKQGVAEAA\")     \r\n    \r\nOr alternativly\r\n    \r\n    # as before we import the SequenceParameter class directly\r\n    from localcider.sequenceParameter import SequenceParameter\r\n\t\r\n\t# the sequence below is the first 30 residues from alpha-synuclein\r\n\tsequenceObject = SequenceParameter(sequenceFile=\"syn.fasta\")\r\n\t\r\n\t\r\n\r\nBoth these code snippets create a `SequenceParameter` object, on which we carry out a huge range of operations. The complete function list is shown below for reference.\r\n\r\nMost of these functions don't take arguments. Optional arguments are prefixed with a question mark (?).\r\n\r\n\r\n#### Sequence parameter functions\r\n\r\n\r\n\r\n\r\n    get_FCR()  | Get the fraction of charged residues\r\n    \r\n-\r\n\r\n    get_NCPR() | Get the net charge per residue\r\n    \r\n-\r\n\r\n    get_countNeg() | Get the number of negatively charged amino acids\r\n    \r\n-\r\n\r\n    get_countPos() | Get the number of positily charged amino acids\r\n\r\n-\r\n\r\n    get_fraction_negative() | Get the fraction of residues which are negativly charged\r\n\r\n-\r\n\r\n    get_fraction_positive() | Get the fraction of residues which are positivly charged\r\n    \r\n-\r\n\r\n    get_countNeut() | Get the number of neutral amino acids\r\n\r\n**`get_amino_acid_fractions()`** - Get a dictionary of the fractions of each amino acid in the sequence\r\n\r\n**`get_fraction_disorder_promoting()`** - Get the fraction of residues predicted to be 'disorder promiting' [REF 1]\r\n\r\n**`get_kappa()`** - Get the kappa value of the sequence [REF 2]\r\n\r\n**`get_mean_net_charge()`** - Get the absolute mean net charge of your sequence\r\n\r\n**`get_phase_plot_region()`** - Get the region on the Pappu-Das diagram of states where your sequence falls \r\n\r\n**`get_mean_hydropathy()`** - Get the mean hydrophobicity as caluclated from a skewed Kyte-Doolittle hydrophobicity scale [REF 3]\r\n\r\n**`get_uversky_hydropathy()`** - Get the mean hydropathy as calculated from a normalized Kyte-Doolittle hydrophobicity scale [REF 3 REF 4]\r\n\r\n#### Phosphorylation functions\r\n\r\n**`get_all_phosphorylatable_sites()`** - Get a list of the positions of all S/Y/T - note this function DOES NOT make any inference about accesibility, binding motifs, it's literally just a list of sites which canonically are able to be phosphorylated.\r\n\r\n**`set_phosphosites(list_of_positions)`** - Sets a residues which may be phosphorylatable (must be T/Y/S)\r\n\r\n**`clear_phosphosites()`** - Clears any previously defined phosphosites\r\n\r\n**`get_kappa_after_phosphorylation()`** - Get the kappa value assuming full phosphorylation (with PO4(-1)).\r\n\r\n**`get_phosphosequence()`** - Returns the fully phosphorylated sequence, with \"phosphorylated residues\" replaced with glutamate (E)\r\n\r\n**`get_phosphosites()`** - Get the list of sites designated as phosphosites previously\r\n\r\n**`get_full_phosphostatus_kappa_distribution()`** - ** UNDER DEVELOPMENT ** For each phospho-permutant, given the available phosphosites, calculate the kappa, fraction positive, fraction negative, FCR, NCP and meanHydropathy. This returns a list of tuples. We're still determining if all this information is necessary. Also note that as the number of phosphosites increases the number of calulations here scales as n^2. Be warned!\r\n\r\n#### Plotting functions\r\n\r\n**`show_phaseDiagram(?label)`** - Renders a `matplotlib` Pappu-Das diagram of states plot with your sequence on the diagram. `Label` can be a string which labels your sequence on the plot.\r\n\r\n**`show_uverskyDiagram(?label)`** - Renders a `matplotlib` Uversky plot with your sequence on the diagram. `Label` can be a string which labels your sequence on the plot.\r\n\r\n**`show_linearHydropathy(blobLen)`** - Renders a `matplotlib` plot of the moving average hydropathy along the sequence, where the hydropathy is calcualted in overlapping windows of size `blobLen`. Typically 5-7 is used (**This made be changed to the default value in future releases**)\r\n\r\n**`show_linearNCPR(blobLen)`** - Renders a `matplotlib` plot of the moving average net charge per residue (NCPR) along the sequence, where the NCPR is calcualted in overlapping windows of size `blobLen`. Typically 5-7 is used (**This made be changed to the default value in future releases**)\r\n\r\n**`show_linearSigma(blobLen)`** - Renders a `matplotlib` plot of the moving average sigma parameter along the sequence, where sigma is calcualted in overlapping windows of size `blobLen`. Typically 5-7 is used (**This made be changed to the default value in future releases**). Recall that sigma is calculated as the NCPR^2 / FCR. \r\n\r\n**`save_phaseDiagram(filename, ?label)`** - Renders a `matplotlib` Pappu-Das diagram of states plot with your sequence on the diagram. `Label` can be a string which labels your sequence on the plot. The plot is saved in the `filename` location (`.png` is appended).\r\n\r\n**`save_uverskyDiagram(filename, ?label)`** - Renders a `matplotlib` Uversky plot with your sequence on the diagram. `Label` can be a string which labels your sequence on the plot. The plot is saved in the `filename` location (`.png` is appended).\r\n\r\n**`save_linearHydropathy(blobLen, filename)`** - Renders a `matplotlib` plot of the moving average hydropathy along the sequence, where the hydropathy is calcualted in overlapping windows of size `blobLen`. Typically 5-7 is used (**This made be changed to the default value in future releases**). The plot is saved in the `filename` location (`.png` is appended).\r\n\r\n**`save_linearNCPR(blobLen, filename)`** - Renders a `matplotlib` plot of the moving average net charge per residue (NCPR) along the sequence, where the NCPR is calcualted in overlapping windows of size `blobLen`. Typically 5-7 is used (**This made be changed to the default value in future releases**). The plot is saved in the `filename` location (`.png` is appended).\r\n\r\n**`save_linearSigma(blobLen, filename)`** - Saves a `matplotlib` generated plot of the moving average sigma parameter along the sequence, where sigma is calcualted in overlapping windows of size `blobLen`. Typically 5-7 is used (**This made be changed to the default value in future releases**). Recall that sigma is calculated as the NCPR^2 / FCR.\r\n\r\nThe plot is saved in the `filename` location (`.png` is appended).\r\n\r\n#### Interactive help\r\n\r\n**localCIDER** contains highly complete interactive help - for any object or function simply type `help(<item>)` for a complete description.     \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n## Tutorials \r\n\r\nComing tomorrow\r\n\r\n\r\n## localCIDER roadmap\r\n\r\nWe have a fairly well defined roadmap for the next few sets of minor release for localCIDER, with the first major release coming sometime thereafter\r\n\r\n##### V 0.2.0\r\n* Turn on the sequence permuatant and Wang-Landau density of kappa states analysis \r\n\r\n##### V 0.3.0\r\n* Provide stand alone, command line tools for the more computationally intensive operations (to make deploying on HPC infrastructure \r\n\r\n\r\n\r\n\r\n## References\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"UA-53151639-1","note":"Don't delete this file! It's used internally to help with page regeneration."}