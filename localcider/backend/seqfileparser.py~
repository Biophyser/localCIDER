
from backendtools import warning_message, status_message

ONE_LETTER_CODE="ACDEFGHIKLMNPQRSTVWY"

class SequenceFileParserException(Exception):
    pass


class SequenceFileParser:
    """
        SequenceFileParser is a stateless sequence parsing machine. 
        You feed it a filename and it returns a sequence as string. Allows for the expansion of the type of sequence which can
        be dealt with.

    """

    def __init__(self):
        pass
    

    def parseSeqFile(self, filename,silent=False):
        # read file to end
        with open(filename) as filehandle:
            content = filehandle.readlines()

        header=False
        seq=""

        for line in content:
            line=line.strip()

            # empty line
            if len(line) == 0:
                continue
            
            if line[0] == ">":
                if header == True:
                    raise KeyFileException("\n\nERROR: During parsing of sequence file found a second header section. Sequence files must be a single file")
                header=True
                continue
            elif len(line) > 0:
                # validate sequence (raises exception if something is bad)
                line=self.__validSeq(line)
                seq=seq+line

        if not silent:
            status_message("Parsed sequence (" + str(len(seq)) + " residues):\n"+seq)
        return seq


    def __validSeq(self, sequence):
        """ Internal function which validates if a [region of] 
            a sequence is a valid protein sequence.

            Super dumb but good first line of validation
        """

        parsed_seq =""
        for i in sequence:
            if i not in ONE_LETTER_CODE:
                if i == " ":
                    # skip spaces
                    continue
                elif i in "1234567890":
                    warning_message("Found '" + i + "' in sequence, stripping out and ignoring...")
                    # strip out numbers (useful for copy/pasted FASTA formats)
                    continue 
                else:
                    raise SequenceFileParserException("\n\nERROR: Invalid sequence file, found [" + i + "] in sequence region\n\n"+sequence+"\n\n")
            else:
                parsed_seq=parsed_seq+i
        return parsed_seq
