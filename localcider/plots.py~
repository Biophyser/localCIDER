""" 
   !--------------------------------------------------------------------------!
   ! LICENSE INFO:                                                            !
   !--------------------------------------------------------------------------!
   !    This file is part of localCIDER.                                      !
   !                                                                          !
   !    Version 0.1.0                                                         !
   !                                                                          !
   !    Copyright (C) 2014, The LocalCIDER development team (current and      !
   !                        former contributors): Alex Holehouse, James       !
   !                        Ahad, Rahul K. Das.                               !
   !                                                                          !
   !    localCIDER was developed in the lab of Rohit Pappu at Washington      !
   !    University in St. Louis. Please see the website for citation          !
   !    information:                                                          !
   !                                                                          !
   !    http://pappulab.github.io/LocalCIDER/                                 !
   !                                                                          !
   !    For more information please see the Pappu lab website:                !
   !                                                                          !
   !    http://pappulab.wustl.edu/                                            !
   !                                                                          !
   !    LocalCIDER is free software: you can redistribute it and/or modify    !
   !    it under the terms of the GNU General Public License as published by  !
   !    the Free Software Foundation, either version 3 of the License, or     !
   !    (at your option) any later version.                                   !
   !                                                                          !
   !    LocalCIDER is distributed in the hope that it will be useful,         !
   !    but WITHOUT ANY WARRANTY; without even the implied warranty of        !
   !    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         !
   !    GNU General Public License for more details.                          !
   !                                                                          !
   !    You should have received a copy of the GNU General Public License     !
   !    along with LocalCIDER.  If not, see <http://www.gnu.org/licenses/>.   !
   !--------------------------------------------------------------------------!
   ! AUTHORSHIP INFO:                                                         !
   !--------------------------------------------------------------------------!
   !                                                                          !
   ! MAIN AUTHOR:   Alex Holehouse                                            !
   !                                                                          !
   !--------------------------------------------------------------------------!
   
   File Description:
   ================
   
   This is a file containing various plotting functions. Note that localCIDER
   doesn't require these functions to work - the ability to plot things is 
   nice but not essential.

   There are eight plotting functions which can be called, and are 
   as follows

   >>> Show or save a single sequence on the diagam of states plot
   - show_single_phasePlot
   - save_single_phasePlot

   >>> Show or save multiple sequences on the diagram of states plot
   - show_multiple_phasePlot
   - save_multiple_phasePlot

   >>> Show or save a single sequence on the Uversky plot
   - show_single_uverskyPlot
   - save_single_uverskyPlot

   >>> Show or save multiple sequences on the Uversky plot
   - show_multiple_uverskyPlot
   - save_multiple_uverskyPlot


   These functions can be called independently of other localCIDER
   functionality, or you could calculate the fraction of positive and 
   negative residues for a bunch of 

"""
from backend import plotting

def show_single_phasePlot(fp, fn, label="", title="Diagram of states", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    fp        | Fraction of positive residues
    fn        | Fraction of negative residues
    
    label     | On-plot label of sequence (DEFAULT = no label)
    title     | Plot title (DEFAULT = "Diagram of states")
    legendOn  | Include the phase diagram region legend (DEFAULT = True)
    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.show_single_phasePlot(fp, fn, label, title, legendOn)



def save_single_phasePlot(fp, fn, filemae, label="", title="Diagram of states", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    fp        | Fraction of positive residues
    fn        | Fraction of negative residues
    filename  | Path/name of file to save plot (.png is appended)

    label     | On-plot label of sequence (DEFAULT = no label)
    title     | Plot title (DEFAULT = "Diagram of states")
    legendOn  | Include the phase diagram region legend (DEFAULT = True)

    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.save_single_phasePlot(fp, fn, filename, label, title, legendOn)



def show_multiple_phasePlot(fp_list, fn_list, label="", title="Diagram of states", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    fp        | Fraction of positive residues
    fn        | Fraction of negative residues
    
    label     | On-plot label of sequence (DEFAULT = no label)
    title     | Plot title (DEFAULT = "Diagram of states")
    legendOn  | Include the phase diagram region legend (DEFAULT = True)
    
    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.show_multiple_phasePlot(fp_list, fn_list, label, title, legendOn)



def save_multiple_phasePlot(fp_list, fn_list, filename, label="", title="Diagram of states", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    fp        | Fraction of positive residues
    fn        | Fraction of negative residues
    filename  | Path/name of file to save plot (.png is appended)
   
    label     | On-plot label of sequence (DEFAULT = no label)
    title     | Plot title (DEFAULT = "Diagram of states")
    legendOn  | Include the phase diagram region legend (DEFAULT = True)
    
    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.save_multiple_phasePlot(fp_list, fn_list, filename, label, title, legendOn)



def show_single_uverskyPlot(hydropathy, mean_net_charge, label="", title="Uversky plot", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    hydropathy      | Mean hydropathy for sequence
    mean_net_charge | Absolute magnitude of the protein's net charge divided by sequence length
    

    
    label           | On-plot label of sequence (DEFAULT = no label)
    title           | Plot title (DEFAULT = "Uversky plot")
    legendOn        | Include the phase diagram region legend (DEFAULT = True)
    
    OUTPUT: 

    Nothing, but an annotated Uversky plot should be generated on screen
    """

    plotting.show_single_uverskyPlot(hydropathy, mean_net_charge, label, title, legendOn)



def save_single_uverskyPlot(hydropathy, mean_net_charge, filemae, label="", title="Uversky plot", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    hydropathy      | Mean hydropathy for sequence
    mean_net_charge | Absolute magnitude of the protein's net charge divided by sequence length
    filename        | Path/name of file to save plot (.png is appended)

    label           | On-plot label of sequence (DEFAULT = no label)
    title           | Plot title (DEFAULT = "Uversky plot")
    legendOn        | Include the phase diagram region legend (DEFAULT = True)

    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.save_single_uverskyPlot(hydropathy, mean_net_charge, filename, label, title, legendOn)



def show_multiple_uverskyPlot(hydropathy_list, mean_net_charge_list, label="", title="Uversky plot", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    hydropathy_list      | List of proteins' mean hydropathy
    mean_net_charge_list | List of the absolute magnitude of the protein's net charge divided by sequence length
    
    label                | On-plot label of sequence (DEFAULT = no label)
    title                | Plot title (DEFAULT = "Uversky plot")
    legendOn             | Include the phase diagram region legend (DEFAULT = True)
    
    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.show_multiple_uverskyPlot(hydropathy_list, mean_net_charge_list, label, title, legendOn)



def save_multiple_uverskyPlot(hydropathy_list, mean_net_charge_list, filename, label="", title="Uversky plot", legendOn=True):
    """
    Plot a single sequence on the Pappu-Das phase plot (diagram of states).

    INPUT
    hydropathy  | List of mean hydropathies for sequences
    mean_net_charge_list | List of the absolute magnitude of the protein's net charge divided by sequence length
    filename    | Path/name of file to save plot (.png is appended)
   
    label       | On-plot label of sequence (DEFAULT = no label)
    title       | Plot title (DEFAULT = "Uversky plot")
    legendOn    | Include the phase diagram region legend (DEFAULT = True)
    
    
    OUTPUT: 

    Nothing but a plot should be generated on screen
    """

    plotting.save_multiple_uverskyPlot(hydropathy_list, mean_net_charge_list, filename, label, title, legendOn)

    
